en_exp = """"""

from Crypto.Cipher import AES
import base64

class AESCipher:
    def __init__(self,password):
        self.BS = 32
        self.key = password.encode() # len 32
        self.iv = b'\xe2\xfdS\xe8xdaxiaD\xeb\xeb\xab\xcb\xeb' # len 16
    def encrypt(self, raw):
        raw = self.pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw))
    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return self.unpad(cipher.decrypt(enc))
    def unpad(self, s):
        return s[0:-ord(s[-1:])]
    def pad(self, s):
        return bytes(s + (self.BS - len(s) % self.BS) * chr(self.BS - len(s) % self.BS), 'utf-8')

password = input("input password:\n")
plain_bytes = AESCipher(password).decrypt(en_exp)
with open("atrust_ssti_access_internal_network.py","wb") as f:
    f.write(plain_bytes)
print("have fun, 成功!")